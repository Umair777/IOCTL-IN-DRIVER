head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	2018.03.29.12.25.16;	author anmolzehra;	state Exp;
branches;
next	1.6;

1.6
date	2018.03.17.08.36.04;	author anmolzehra;	state Exp;
branches;
next	1.5;

1.5
date	2018.03.17.08.27.24;	author anmolzehra;	state Exp;
branches;
next	1.4;

1.4
date	2018.03.16.08.18.46;	author anmolzehra;	state Exp;
branches;
next	1.3;

1.3
date	2018.03.16.08.11.39;	author anmolzehra;	state Exp;
branches;
next	1.2;

1.2
date	2018.03.10.08.00.48;	author anmolzehra;	state Exp;
branches;
next	1.1;

1.1
date	2018.03.09.16.17.51;	author anmolzehra;	state Exp;
branches;
next	;


desc
@@


1.7
log
@*** empty log message ***
@
text
@#include"header.h"
#include"declarations.h"
ssize_t Readdev(struct file *filep,char __user *ubuff,size_t size,loff_t *offp)
{
	int read_beg_i,read_beg_qs,quantum,k;
	int ret,noctr,nocsr,i;
	Dev *ldev;
	Qset *lqset;
	size_t lsize;
	loff_t offset;
#ifdef DEBUG
	printk(KERN_ALERT "Readdev Begins\n");
#endif
#ifdef DEBUG
        printk(KERN_INFO "Offset is: %ld\n",(long int)*offp);
#endif
#ifdef DEBUG
        printk(KERN_INFO "f_pos is: %ld\n",(long int)filep->f_pos);
#endif

	ldev=filep->private_data;	
	if(!ldev)
	{
#ifdef DEBUG
		printk(KERN_INFO "Device couldn't be found\n");
		return (ssize_t)-1;
#endif
	}
	if(size>ldev->datasize)
	{
		lsize=ldev->datasize;	
#ifdef DEBUG
		printk(KERN_ERR "Partial writing of data will be done\n");
#endif
	}
	else
	{
		lsize=size;
	}
	printk(KERN_INFO "lsize:%d\n",(int)lsize);
	lqset=ldev->first;
	printk(KERN_INFO "address of first item received by readdev is :%p\n",ldev->first);
	offset=filep->f_pos;
	read_beg_i=offset/(noofreg*regsize);
	if(offset%(noofreg*regsize)!=0)
	{
		read_beg_i++;
	}
#ifdef DEBUG
	printk(KERN_INFO "read_beg_i:%d\n",read_beg_i);
#endif
	read_beg_qs=offset/regsize;
#ifdef DEBUG
	printk(KERN_INFO "read_beg_qs:%d\n",read_beg_qs);
#endif
	for(k=0;k<read_beg_i;k++)
	{
		if(k==0)
		{
			lqset=ldev->first;
		}
		else
		{
			lqset=lqset->next;	
		}
	}
	noctr=lsize;
	nocsr=0;
	quantum=(read_beg_qs+1)%noofreg;
	i=quantum-1;
	while(noctr)
	{
		if(noctr > ldev->regsize)
		{
			noctr=ldev->regsize;
		}
		ret=copy_to_user(ubuff+nocsr,lqset->data[i],noctr);	
		if(ret)
		{
#ifdef DEBUG
			printk(KERN_ERR "Partial reading taking place\n");
#endif
		}
		nocsr+=noctr-ret;
		*offp+=noctr-ret;
		noctr=lsize-nocsr;
		if(i == ldev->noofreg-1 )
		{
			lqset=lqset->next;
			i=0;
		}
		else
		{
			i++;
		}
	}
	filep->f_pos=*offp;
#ifdef DEBUG
        printk(KERN_INFO "Offset is: %ld\n",(long int)*offp);
#endif
#ifdef DEBUG
        printk(KERN_INFO "f_pos is: %ld\n",(long int)filep->f_pos);
#endif
#ifdef DEBUG
	printk(KERN_ALERT "Readdev Ends\n");
#endif
	return nocsr;
}
@


1.6
log
@write variable changed to read onss
@
text
@a83 1
//printk(KERN_INFO "data written :%s\n",(char *)lqset->data[i]);
@


1.5
log
@offset thing added in readdev
@
text
@d5 1
a5 1
	int write_beg_i,write_beg_qs,quantum,k;
d44 1
a44 1
	write_beg_i=offset/(noofreg*regsize);
d47 1
a47 1
		write_beg_i++;
d50 1
a50 1
	printk(KERN_INFO "write_beg_i:%d\n",write_beg_i);
d52 1
a52 1
	write_beg_qs=offset/regsize;
d54 1
a54 1
	printk(KERN_INFO "write_beg_qs:%d\n",write_beg_qs);
d56 1
a56 1
	for(k=0;k<write_beg_i;k++)
d69 1
a69 1
	quantum=(write_beg_qs+1)%noofreg;
@


1.4
log
@offp and f_pos inserted
@
text
@d5 1
d10 1
d43 24
d68 3
a70 1
	i=nocsr=0;
@


1.3
log
@offp and f_pos
@
text
@d12 7
d58 1
d70 7
@


1.2
log
@*** empty log message ***
@
text
@d46 1
a46 1
			printk(KERN_ERR "Partial writing taking place\n");
@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
		ret=copy_to_user(ubuff+nocsr,lqset[i].data,noctr);	
@
